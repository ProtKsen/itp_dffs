diff -ruN /gromacs-original/src/gromacs/mdlib/main.cpp /gromacs-ssages/src/gromacs/mdlib/main.cpp
--- /gromacs-original/src/gromacs/mdlib/main.cpp
+++ /gromacs-ssages/src/gromacs/mdlib/main.cpp
@@ -63,6 +63,8 @@
 #include "gromacs/utility/stringutil.h"
 #include "gromacs/utility/sysinfo.h"
 
+#include "GromacsHook.h"
+
 /* The source code in this file should be thread-safe.
          Please keep it that way. */
 
@@ -311,7 +313,11 @@
     cr->sim_nodeid = cr->nodeid % nnodpersim;
     cr->nnodes     = nnodpersim;
 #if GMX_MPI
-    MPI_Comm_split(MPI_COMM_WORLD, sim, cr->sim_nodeid, &cr->mpi_comm_mysim);
+    // Get SSAGES communicator and assign.
+    auto& ssages = SSAGES::GromacsHook::Instance();
+    auto comm = ssages.GetCommunicator();
+    cr->mpi_comm_mysim = comm;
+    //MPI_Comm_split(MPI_COMM_WORLD, sim, cr->sim_nodeid, &cr->mpi_comm_mysim);
     cr->mpi_comm_mygroup = cr->mpi_comm_mysim;
     cr->nodeid           = cr->sim_nodeid;
 #endif
diff -ruN /gromacs-original/src/programs/CMakeLists.txt /gromacs-ssages/src/programs/CMakeLists.txt
--- /gromacs-original/src/programs/CMakeLists.txt
+++ /gromacs-ssages/src/programs/CMakeLists.txt
@@ -35,6 +35,12 @@
 file(GLOB MDRUN_SOURCES mdrun/*.cpp)
 # make an "object library" that we can re-use for multiple targets
 add_library(mdrun_objlib OBJECT ${MDRUN_SOURCES})
+add_library(mdrun STATIC $<TARGET_OBJECTS:mdrun_objlib>)
+install(TARGETS mdrun
+        EXPORT mdrun
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        COMPONENT libraries)
 
 if(GMX_FAHCORE)
     # The lack of a real source file here alongside the object library
diff -ruN /gromacs-original/src/programs/mdrun/md.cpp /gromacs-ssages/src/programs/mdrun/md.cpp
--- /gromacs-original/src/programs/mdrun/md.cpp
+++ /gromacs-ssages/src/programs/mdrun/md.cpp
@@ -66,6 +66,7 @@
 #include "gromacs/imd/imd.h"
 #include "gromacs/listed-forces/manage-threading.h"
 #include "gromacs/math/functions.h"
+#include "gromacs/math/units.h"
 #include "gromacs/math/utilities.h"
 #include "gromacs/math/vec.h"
 #include "gromacs/math/vectypes.h"
@@ -126,6 +127,7 @@
 #include "gromacs/utility/real.h"
 #include "gromacs/utility/smalloc.h"
 #include "gromacs/utility/stringutil.h"
+#include "GromacsHook.h"
 
 #include "deform.h"
 #include "membed.h"
@@ -851,6 +853,52 @@
         fprintf(fplog, "\n");
     }
 
+    // Setup SSAGES singleton and lambdas.
+    auto& ssages = SSAGES::GromacsHook::Instance();
+    ssages.SetPeriodicBoundaryConditions(ir->ePBC);
+    ssages.SetGMXPush([&](){
+        // Begin SSAGES.
+        auto natoms = top_global->natoms;
+        int* ids = nullptr;
+        if(PAR(cr) && DOMAINDECOMP(cr))
+        {
+            natoms = cr->dd->nat_home;
+            ids = cr->dd->gatindex;
+        }
+        ssages.PushToGromacs(
+            natoms,
+            ids,
+            mdatoms->typeA,
+            mdatoms->massT,
+            as_rvec_array(state->x.data()),
+            as_rvec_array(state->v.data()),
+            as_rvec_array(f.data()),
+            force_vir);
+    });
+    ssages.SetGMXPull([&](){
+        // Begin SSAGES.
+        auto natoms = top_global->natoms;
+        int* ids = nullptr;
+        if(PAR(cr) && DOMAINDECOMP(cr))
+        {
+            natoms = cr->dd->nat_home;
+            ids = cr->dd->gatindex;
+        }
+        ssages.PullToSSAGES(
+            step,
+            natoms,
+            ids,
+            mdatoms->typeA,
+            mdatoms->massT,
+            as_rvec_array(state->x.data()),
+            as_rvec_array(state->v.data()),
+            as_rvec_array(f.data()),
+            state->box,
+            enerd->term[F_TEMP],
+            enerd->term[F_EPOT],
+            BOLTZ);
+    });
+
     walltime_accounting_start(walltime_accounting);
     wallcycle_start(wcycle, ewcRUN);
     print_start(fplog, cr, walltime_accounting, "mdrun");
@@ -982,6 +1030,9 @@
         }
     }
 
+    ssages.SyncToSSAGES();
+    ssages.PreSimulationHook();
+
     /* and stop now if we should */
     bLastStep = (bLastStep || (ir->nsteps >= 0 && step_rel > ir->nsteps));
     while (!bLastStep)
@@ -1265,6 +1316,9 @@
                      fr, vsite, mu_tot, t, ed, bBornRadii,
                      (bNS ? GMX_FORCE_NS : 0) | force_flags,
                      ddOpenBalanceRegion, ddCloseBalanceRegion);
+
+            ssages.SyncToSSAGES();
+            ssages.PostIntegrationHook();
         }
 
         if (EI_VV(ir->eI) && !startingFromCheckpoint && !bRerunMD)
@@ -1989,9 +2043,13 @@
         /* If bIMD is TRUE, the master updates the IMD energy record and sends positions to VMD client */
         IMD_prep_energies_send_positions(ir->bIMD && MASTER(cr), bIMDstep, ir->imd, enerd, step, bCalcEner, wcycle);
 
+        ssages.PostStepHook();
     }
     /* End of main MD loop */

+    ssages.SyncToSSAGES();
+    ssages.PostSimulationHook();
+
     /* Closing TNG files can include compressing data. Therefore it is good to do that
      * before stopping the time measurements. */
     mdoutf_tng_close(outf);
diff -ruN /gromacs-original/CMakeLists.txt /gromacs-ssages/CMakeLists.txt
--- /gromacs-original/CMakeLists.txt
+++ /gromacs-ssages/CMakeLists.txt
@@ -102,14 +102,14 @@
 # These variables collect libraries that GROMACS requires for
 # linking. They should be appended to with list(APPEND ${name}
 # new-library) calls. They are:
 #  - Libraries that are required for libgromacs (only)
-set(GMX_EXTRA_LIBRARIES "")
+set(GMX_EXTRA_LIBRARIES "${GMX_EXTRA_LIBRARIES}")
 #  - Libraries that are required for all code in the repository
-set(GMX_COMMON_LIBRARIES "")
+set(GMX_COMMON_LIBRARIES "${GMX_COMMON_LIBRARIES}")
 #  - Libraries that all code linked against libgromacs needs
 #    (i.e., something that is exposed in installed headers).
-set(GMX_PUBLIC_LIBRARIES "")
+set(GMX_PUBLIC_LIBRARIES "${GMX_PUBLIC_LIBRARIES}")
 
 ########################################################################
 # Check and warn if cache generated on a different host is being reused
 ########################################################################
